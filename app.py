# app.py ‚Äì HU UI + k√©pb≈ël-prompt + automatikus EN ford√≠t√°s + FLUX gener√°l√°s
import base64
try:
    from openai import OpenAI
except ImportError:
    OpenAI = None  # majd jelezni fogunk, ha hi√°nyzik a csomag

import os, io, base64, tempfile, requests, streamlit as st
from PIL import Image, ImageOps
import replicate
from datetime import datetime

# ------------------ ALAP ------------------
st.set_page_config(page_title="Kiskakas k√©pgener√°tor", layout="centered")

# --- Piros gombok (st.button + st.download_button) ---
st.markdown("""
<style>
.stButton > button, .stDownloadButton > button {
  background-color:#e11d48; /* rose-600 */
  color:white; border:0; border-radius:10px;
  padding:0.6rem 1.1rem; font-weight:600;
}
.stButton > button:hover, .stDownloadButton > button:hover {
  background-color:#be123c; /* rose-700 */
}
</style>
""", unsafe_allow_html=True)

def render_help_sidebar():
    with st.sidebar:
        st.title("‚ùì S√∫g√≥ / √ötmutat√≥")

        with st.expander("Mi ez az alkalmaz√°s?", expanded=False):
            st.markdown("""
**Kiskakas K√©pgener√°tor** ‚Äì √∫j, fot√≥realisztikus k√©pet k√©sz√≠t egy felt√∂lt√∂tt **arck√©p** alapj√°n.
Az arc megmarad (ugyanaz a szem√©ly), a jelenetet a **prompt** (le√≠r√°s) hat√°rozza meg.
A gener√°l√°s a Replicate szolg√°ltat√°son fut√≥ **FLUX Kontext Pro** modellel t√∂rt√©nik (arc-h≈± img2img).
            """)

        with st.expander("Mit tud?", expanded=False):
            st.markdown("""
- **Arck√©p felt√∂lt√©se** ‚Äì erre √©p√ºl az azonoss√°g meg≈ërz√©se.  
- **K√©pb≈ël prompt** (opcion√°lis m√°sodik k√©p): automatikus **angol le√≠r√°s**, szerkeszthet≈ë.  
- **Prompt mez≈ë** ‚Äì b√°rmikor √°t√≠rhatod/kieg√©sz√≠theted.  
- **Angolra ford√≠t√°s** ‚Äì ha bepip√°lod, magyarb√≥l automatikusan angolra v√°lt a modellnek.  
- **Arc-hasonl√≥s√°g cs√∫szka** ‚Äì mennyire ragaszkodjon az eredeti archoz.  
- **Halad√≥ be√°ll√≠t√°sok** ‚Äì l√©p√©sek sz√°ma, guidance, negat√≠v prompt.  
- **Eredm√©ny** ‚Äì megjelen√≠t√©s √©s let√∂lt√©s.
            """)

        with st.expander("L√©p√©sr≈ël l√©p√©sre", expanded=False):
            st.markdown("""
1. **T√∂lts fel egy arck√©pet.** √âles, j√≥l megvil√°g√≠tott fot√≥ a legjobb.  
2. *(Opcion√°lis)* **K√©p a prompthoz** ‚Üí katt **‚ÄûK√©pb≈ël promptot k√©rek‚Äù** (angol le√≠r√°st kapunk).  
3. **Szerkeszd a promptot.** √çrd le a helysz√≠nt, ruh√°t, f√©nyt, n√©z≈ësz√∂get stb.  
   - Ha feliratot szeretn√©l t√°bl√°ra: k√©rj **BLANK/√úRES** kartont; a feliratot k√©s≈ëbb k√≥ddal r√° lehet √≠rni.  
4. *(Opcion√°lis)* **‚ÄûK√ºld√©s el≈ëtt ford√≠tsd angolra‚Äù** ‚Äì jel√∂ld be, ha magyarul √≠rt√°l.  
5. **Arc-hasonl√≥s√°g**: 0.5‚Äì0.7 j√≥ kezd√©s; 0.8‚Äì0.9 nagyon h≈± arc, de kevesebb v√°ltoz√°s.  
6. *(Halad√≥)* **L√©p√©sek sz√°ma** (kevesebb = gyorsabb), **Guidance** (magasabb = jobban k√∂veti a promptot), **Negat√≠v prompt**.  
7. **Katt a ‚ÄûK√©p gener√°l√°sa‚Äù gombra.** Els≈ë fut√°s lassabb lehet (1‚Äì3 perc). A k√©sz k√©pet let√∂ltheted.
            """)

        with st.expander("Tippek a sz√©p eredm√©nyhez", expanded=False):
            st.markdown("""
- **J√≥ arck√©p**: szemb≈ël, √©les, j√≥ f√©nyben, az arc ne legyen takarva.  
- **Pontoss√°g**: helysz√≠n, napszak/f√©ny (pl. *golden hour*), n√©z≈ësz√∂g (pl. *full-body*, *medium shot*), ruh√°zat.  
- **√úres t√°bla**: feliratot k√©s≈ëbb programb√≥l adj hozz√° (a modellek gyakran f√©lre√≠rj√°k).
- **Lass√∫?** Cs√∂kkentsd a l√©p√©sek sz√°m√°t (pl. 18‚Äì22).
            """)

        with st.expander("Hibaelh√°r√≠t√°s", expanded=False):
            st.markdown("""
- **‚ÄûNem siker√ºlt promptot k√©sz√≠teni a k√©pb≈ël‚Ä¶‚Äù**  
  ‚Äì Nincs OpenAI kulcs, vagy a v√°lasztott Replicate k√©ple√≠r√≥ nem √©rhet≈ë el. √çrj promptot k√©zzel, vagy adj **OPENAI_API_KEY**-t.  
- **Replicate 401/404/422**  
  ‚Äì Ellen≈ërizd a **REPLICATE_API_TOKEN**-t √©s a modellhez val√≥ hozz√°f√©r√©st.  
- **Nagyon lass√∫ gener√°l√°s**  
  ‚Äì Els≈ë fut√°s hideg ind√≠t√°s. Kevesebb l√©p√©s gyors√≠t.
            """)


# --- L√°bl√©c / Copyright ---
from datetime import datetime

def render_footer(owner: str = "Viktor Husz√°r", year: int | None = None, sticky: bool = False):
    y = year or datetime.now().year
    if not sticky:
        st.markdown(
            f"""
            <hr style="margin-top:3rem;border:none;border-top:1px solid rgba(255,255,255,0.15);" />
            <div style="text-align:center;opacity:.6;font-size:0.9rem;">
                ¬© {y} {owner} ¬∑ Minden jog fenntartva
            </div>
            """,
            unsafe_allow_html=True
        )
    else:
        st.markdown(
            f"""
            <style>
              .kk-footer {{
                position: fixed; left: 0; right: 0; bottom: 0;
                text-align: center; opacity:.65; font-size:.9rem;
                padding:.35rem 0; pointer-events:none;
              }}
              .kk-footer span {{ pointer-events:auto; padding:.1rem .5rem; }}
            </style>
            <div class="kk-footer"><span>¬© {y} {owner} ¬∑ Minden jog fenntartva</span></div>
            """,
            unsafe_allow_html=True
        )


REPLICATE_API_TOKEN = st.secrets.get("REPLICATE_API_TOKEN", os.getenv("REPLICATE_API_TOKEN", "")).strip()
if not REPLICATE_API_TOKEN:
    st.error("Hi√°nyzik a REPLICATE_API_TOKEN. Add meg a .streamlit/secrets.toml f√°jlban vagy k√∂rnyezeti v√°ltoz√≥k√©nt.")
    st.stop()
os.environ["REPLICATE_API_TOKEN"] = REPLICATE_API_TOKEN

OPENAI_API_KEY = st.secrets.get("OPENAI_API_KEY", os.getenv("OPENAI_API_KEY", "")).strip()

MODEL_FLUX = "black-forest-labs/flux-kontext-pro"
PROMPT_MODELS = [
    "pharmapsychotic/clip-interrogator",
    "tstramer/clip-interrogator",
    "methexis-inc/img2prompt",
]

# ------------------ SEG√âDF√úGGV√âNYEK ------------------
def save_temp_png(upload) -> str:
    with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
        Image.open(upload).convert("RGB").save(tmp.name, "PNG")
        return tmp.name

def download_bytes(url: str) -> bytes:
    r = requests.get(url, timeout=180); r.raise_for_status(); return r.content

# a f√°jl tetej√©n ezek kellenek:
# import base64
# from openai import OpenAI

def try_openai_img2prompt(img_path: str) -> str:
    if not OPENAI_API_KEY:
        raise RuntimeError("Nincs OPENAI_API_KEY")
    if OpenAI is None:
        raise RuntimeError("Hi√°nyzik az openai csomag. Telep√≠tsd: pip install --upgrade openai")

    client = OpenAI(api_key=OPENAI_API_KEY)

    with open(img_path, "rb") as f:
        b64 = base64.b64encode(f.read()).decode("utf-8")

    messages = [{
        "role": "user",
        "content": [
            {"type": "text",
             "text": ("Describe this image as a concise English prompt for a photorealistic diffusion model (SDXL/FLUX). "
                      "Include subject, clothing, setting, lighting, composition. One sentence.")},
            {"type": "image_url",
             "image_url": {"url": f"data:image/png;base64,{b64}"}}
        ],
    }]

    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        max_tokens=200,
        temperature=0.2
    )
    return resp.choices[0].message.content.strip()



# model-lista √©s bemenet-√©p√≠t≈ëk
PROMPT_MODELS = [
    ("pharmapsychotic/clip-interrogator", lambda p: {"image": open(p, "rb")}),
    ("tstramer/clip-interrogator",        lambda p: {"image": open(p, "rb")}),
    ("cjwbw/blip-image-captioning",       lambda p: {"image": open(p, "rb")}),
    ("yorickvp/llava-13b",                lambda p: {
        "image": open(p, "rb"),
        "prompt": ("Describe this image as a concise English prompt for a photorealistic diffusion model. "
                   "Include subject, clothing, setting, lighting, composition. One sentence.")
    }),
]

def try_replicate_img2prompt(img_path: str) -> str:
    client = replicate.Client(api_token=REPLICATE_API_TOKEN)
    last_err = None
    for ref, build in PROMPT_MODELS:
        try:
            out = client.run(ref, input=build(img_path))
            if isinstance(out, dict):
                for k in ("prompt", "caption", "best_caption", "best_prompt", "description", "text"):
                    if k in out:
                        return str(out[k]).strip()
                return str(out).strip()
            if isinstance(out, (list, tuple)) and out:
                return str(out[0]).strip()
            return str(out).strip()
        except Exception as e:
            last_err = e
            continue
    raise RuntimeError(f"Replicate img2prompt hiba: {last_err}")


def translate_to_english(text: str) -> str:
    """Gyors HU‚ÜíEN ford√≠t√°s (OpenAI, ha van; k√ºl√∂nben visszaadjuk az eredetit)."""
    if not text.strip():
        return text
    if OPENAI_API_KEY:
        try:
            from openai import OpenAI
            client = OpenAI(api_key=OPENAI_API_KEY)
            r = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role":"system","content":"Translate to concise, natural English."},
                          {"role":"user","content":text}]
            )
            return r.choices[0].message.content.strip()
        except Exception:
            return text
    else:
        # nincs OpenAI ‚Üí nem ford√≠tunk (a modellek az angolt szeretik, javasolt a kulcs megad√°sa)
        return text

# ------------------ UI ------------------
st.title("üé® Kiskakas K√©pgener√°tor")
st.caption("1) Arck√©p ‚Ä¢ 2) (opcion√°lis) K√©pb≈ël prompt ‚Ä¢ 3) Prompt szerkeszt√©se ‚Ä¢ 4) Gener√°l√°s")
render_help_sidebar()
render_footer(sticky=True)

# 1) Arck√©p
face_file = st.file_uploader("üì∏ 1) Arck√©p felt√∂lt√©se (JPG/PNG)", type=["jpg","jpeg","png"])
if face_file:
    img = Image.open(face_file).convert("RGB")
    img = ImageOps.exif_transpose(img)  # helyes t√°jol√°s
    st.image(img, caption="Felt√∂lt√∂tt arck√©p (kicsiny√≠tett)", width=260) 
    with st.expander("Nagyobb n√©zet"):
        st.image(img, use_container_width=True)

# 2) K√©p a prompthoz
prompt_img = st.file_uploader("üñºÔ∏è 2) K√©p a prompthoz (opcion√°lis)", type=["jpg","jpeg","png"])
col1, col2 = st.columns([1,2])
with col1:
    want_img2prompt = st.button("‚ú® K√©pb≈ël promptot k√©rek")
with col2:
    st.caption("A k√©pb≈ël automatikus angol prompt k√©sz√ºl; lent szabadon szerkesztheted.")

if want_img2prompt and prompt_img is not None:
    ppath = save_temp_png(prompt_img)
    try:
        with st.spinner("OpenAI k√©ple√≠r√°s‚Ä¶"):
            auto_prompt = try_openai_img2prompt(ppath)
    except Exception as e1:
        try:
            with st.spinner("Replicate k√©ple√≠r√°s (tartal√©k)‚Ä¶"):
                auto_prompt = try_replicate_img2prompt(ppath)
        except Exception as e2:
            st.error(f"Nem siker√ºlt promptot k√©sz√≠teni a k√©pb≈ël.\nOpenAI: {e1}\nReplicate: {e2}")
            auto_prompt = ""
    if auto_prompt:
        st.session_state["prompt_text"] = auto_prompt
        st.success("‚úÖ Prompt elk√©sz√ºlt. Lent szerkeszthet≈ë.")

# 3) Prompt mez≈ë (szerkeszthet≈ë)
default_prompt = ("This man is hitchhiking to K√∂tcse on a rural Hungarian road, holding a BLANK cardboard sign, "
                  "photorealistic, natural daylight, realistic skin tones, sharp details")
prompt_text = st.session_state.get("prompt_text", default_prompt)
prompt_box = st.text_area("üìù 3) Jelenet le√≠r√°sa (szerkeszthet≈ë)", value=prompt_text, key="prompt_text", height=140)

translate_checkbox = st.checkbox("K√ºld√©s el≈ëtt ford√≠tsd angolra (aj√°nlott)", value=False)

# 4) Arc-hasonl√≥s√°g + halad√≥
face_strength = st.slider("Arc-hasonl√≥s√°g", 0.30, 0.90, 0.60, 0.05,
                          help="Magasabb √©rt√©kn√©l er≈ësebben ≈ërzi az arcot, de kevesebb kreat√≠v szabads√°g.")
with st.expander("Halad√≥ be√°ll√≠t√°sok (opcion√°lis)", expanded=False):
    steps = st.slider("L√©p√©sek sz√°ma", 10, 60, 24, 1, help="Kevesebb = gyorsabb, t√∂bb = r√©szletesebb (lassabb).")
    guidance = st.slider("Ir√°ny√≠t√°s (guidance scale)", 2.0, 12.0, 7.5, 0.5)
    negative = st.text_input("Negat√≠v prompt", "blurry, deformed, low quality, watermark, extra fingers, bad anatomy, text")

# 5) Gener√°l√°s
go = st.button("üöÄ 4) K√©p gener√°l√°sa")

if go:
    if not face_file:
        st.warning("El≈ësz√∂r t√∂lts fel egy arck√©pet.")
        st.stop()

    face_path = save_temp_png(face_file)

    # v√©gs≈ë prompt (opcion√°lis HU‚ÜíEN)
    orig_prompt = st.session_state.get("prompt_text", default_prompt).strip()
    final_prompt = translate_to_english(orig_prompt) if translate_checkbox else orig_prompt

    with st.expander("Angol prompt (amit a modell kap)", expanded=False):
        st.write(final_prompt)

    st.info("Gener√°l√°s elkezd≈ëd√∂tt..")
    with st.spinner("Gener√°l√°s a Replicate-en‚Ä¶"):
        try:
            client = replicate.Client(api_token=REPLICATE_API_TOKEN)
            inputs = {
                "input_image": open(face_path, "rb"),
                "prompt": final_prompt,
                "negative_prompt": (negative or None),
                "prompt_strength": float(face_strength),
                "guidance_scale": float(guidance),
                "num_inference_steps": int(steps),
                "aspect_ratio": "match_input_image",
                "output_format": "jpg",
                "safety_tolerance": 2,
                "prompt_upsampling": True,
                "seed": -1,
            }
            output = client.run(MODEL_FLUX, input=inputs)
            url = str(output[0]) if isinstance(output, (list, tuple)) and output else str(output)
            st.image(url, caption="üéâ Elk√©sz√ºlt k√©p", use_container_width=True)
            st.markdown(f"[K√©p megnyit√°sa √∫j lapon]({url})")
            try:
                data = download_bytes(url)
                st.download_button("üì• K√©p let√∂lt√©se", data, file_name="kiskakas_generated.png", mime="image/png")
            except Exception as e:
                st.warning(f"Let√∂lt√©s sikertelen: {e}")
        except replicate.exceptions.ReplicateError as e:
            st.error(f"Replicate hiba: {e}")
        except Exception as e:
            st.error(f"V√°ratlan hiba: {e}")
